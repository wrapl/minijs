let Opcodes := []

let Version := with Input := file("opcodes.txt", "r") do
	let Version := Input:read:trim
	loop
		let Line := while Input:read
		Opcodes:put(Line:trim / ",")
	end
	Input:close
	Version
end

switch Args[1] or "c": string
case "c" do
	with Output := file("ml_opcodes.h", "w") do
		Output:write("#ifndef ML_OPCODES_H\n#define ML_OPCODES_H\n")
		Output:write('\n#define ML_BYTECODE_VERSION {Version}\n')
		Output:write("\ntypedef enum {\n")
		for (Name, Type) in Opcodes do
			Output:write('\tMLI_{Name},\n')
		end
		Output:write("} ml_opcode_t;\n\ntypedef enum {\n")
		let Types := list(unique(Opcodes -> _[2])):sort
		for Type in Types do
			Output:write('\tMLIT_{Type},\n')
		end
		Output:write("} ml_inst_type_t;\n\nextern const char *MLInstNames[];\nextern const ml_inst_type_t MLInstTypes[];\n\n")
		Output:write("#endif\n")
		Output:close
	end

	with Output := file("ml_opcodes.c", "w") do
		Output:write("#include \"ml_opcodes.h\"\n\nconst char *MLInstNames[] = {\n")
		for (Name, Type) in Opcodes do
			Output:write('\t\"{Name:lower}\",\n')
		end
		Output:write("};\n\nconst ml_inst_type_t MLInstTypes[] = {\n")
		for (Name, Type) in Opcodes do
			Output:write('\tMLIT_{Type},\n')
		end
		Output:write("};\n\n")
		Output:close
	end
case "js" do
	with Output := file("opcodes.js", "w") do
		Output:write('const ML_BYTECODE_VERSION = {Version};\n\n')
		for I, (Name, Type) in Opcodes do
			Output:write('const MLI_{Name} = {I - 1};\n')
		end
		Output:close
	end
case "py" do
	with Output := file("opcodes.py", "w") do
		Output:write('ML_BYTECODE_VERSION = {Version}\n\n')
		for I, (Name, Type) in Opcodes do
			Output:write('MLI_{Name} = {I - 1}\n')
		end
		Output:close
	end
case "java" do
	with Output := file("Opcode.java", "w") do
		Output:write("package wrapl.minilang;\n\n")
		Output:write("enum Opcode {")
		for I, (Name, Type) in Opcodes do
			I > 1 and Output:write(",")
			Output:write('\n\tMLI_{Name}')
		end
		Output:write("\n}\n")
		Output:close
	end
end